package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import domain.Actor;
import domain.Administrator;
import domain.Pilgrim;
import domain.Route;
import domain.Stage;
import repositories.RouteRepository;
import security.Authority;
import security.LoginService;
import security.UserAccount;
import org.springframework.util.Assert;

@Service
@Transactional
public class RouteService {
	
	// ------------------- Managed repository --------------------
	
	@Autowired
	private RouteRepository routeRepository;
	
	// ------------------- Supporting services -------------------
	
	@Autowired
	private PilgrimService pilgrimService;
//	@Autowired
//	private AdministratorService administratorService;
	
	// ----------------------- Constructor -----------------------
	
	// ------------------- Simple CRUD methods -------------------
	
	public Collection<Route> findAll(){
		return routeRepository.findAll();
	}
	
	public Collection<Route> findByPilgrim(){
		UserAccount userAccount = LoginService.getPrincipal();
		Pilgrim pilgrim = getPilgrim(userAccount);
		return routeRepository.findByPilgrim(pilgrim);
	}
	
	public Route create(){
		Route route = new Route();
		return route;
	}
	
	public void save(Route route){
		Assert.notNull(route);
		Assert.isTrue(isAdministrator());
		
		routeRepository.save(route);
	}
	
	public void delete (Route route){
		Assert.notNull(route);
		Assert.isTrue(isAdministrator());
		
//		routeRepository.delete(route); no BORRAR!!! 
		route.setActive(false); // TODO Variable para "desactivar", consulta con profesor pendiente
		routeRepository.save(route);
	}
	
	// ----------------- Other business methods ------------------
	
	// REPOSITORIO:
	
	public Collection<Route> routesByRegistrationsDesc() {
		return routeRepository.routesByRegistrationsDesc();
	}
	
	public Collection<Route> routesByKeyword(String keyword){
		Assert.notNull(keyword);
		
		Collection<Route> result = new HashSet<Route>();	//	No admite duplicados
		result.addAll(routeRepository.routeByKeyword(keyword));
		
		return result;
	}
	
	// CASOS DE USO:
	
	public void registerOnRoute(Route route){
		UserAccount userAccount=LoginService.getPrincipal();
		Assert.notNull(route);
		Assert.isTrue(isPilgrim(userAccount));
		Pilgrim pilgrim = getPilgrim(userAccount);
		
		route.getPilgrims().add(pilgrim);
		pilgrim.getRoutes().add(route);
	
		pilgrimService.save(pilgrim);	//	TODO Si guarda doble quitar uno de los dos
		routeRepository.save(route);
	}
	
	// AUXILIARES
	
	private Boolean isPrincipal(Route route, UserAccount userAccount) {
		Boolean result = false;
		Assert.isTrue(isPilgrim(userAccount));
		
		Pilgrim pilgrim = getPilgrim(userAccount);
		Collection<Route> routes = pilgrim.getRoutes();
		
		for(Route aux : routes){
			if(aux == route)
				result = true;
		}
		return result;
	}
	
	public Boolean isPilgrim(UserAccount userAccount){
		Boolean result=false;
		Collection<Authority> authorities=userAccount.getAuthorities();
		
		for(Authority a:authorities){
			if(a.getAuthority().equals("PILGRIM"))
				result=true;
		}
		return result;
	}
	
	Boolean isAdministrator(){
		UserAccount userAccount = LoginService.getPrincipal();
		Boolean result=false;
		Collection<Authority> authorities=userAccount.getAuthorities();
		
		for(Authority a:authorities){
			if(a.getAuthority().equals("ADMIN"))
				result=true;
		}
		return result;
	}
	
	private Pilgrim getPilgrim(UserAccount userAccount){
		Pilgrim result = pilgrimService.findByUserAccount(userAccount);
		return result;
	}
	
//	private Administrator getAdministrator(UserAccount userAccount){
//		Administrator result = administratorService.findByUserAccount(userAccount);
//		return result;
//	}
}
